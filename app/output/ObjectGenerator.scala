package output

import java.io.PrintWriter

import api.dtos.DSLDTO
import com.typesafe.config.ConfigFactory

import scala.concurrent.{ ExecutionContext, Future }

class ObjectGenerator[T](dsl: DSLDTO, data: Seq[T]) extends CodeGenerator {

  implicit val exec: ExecutionContext = ExecutionContext.global

  //val GeneratedClassPath: String = ConfigFactory.load().getString("generatedClassPath")

  def generate(outputPath: String, objectName: String): Future[Unit] = {

    val transformationsParser = dsl.transformations.map { transformation =>

      val lambda = transformation.predicate match {
        case Some(p) => "(" + p + ")"
        case None => ""
      }
      transformation.transformationName.getOrElse("") + lambda
    }

    val res = transformationsParser.foldLeft("")(_ + "." + _)

    val outType = dsl.outType.`type`.getOrElse("")

    Future(new PrintWriter(outputPath + "\\" + objectName + ".scala") {

      write("//This file is auto generated by code")
      write(
        s"""
         |object $objectName{
         |def run: $outType = {
         |$data$res
         |}
         |}
    """.stripMargin)
      close()
    })
  }
}
